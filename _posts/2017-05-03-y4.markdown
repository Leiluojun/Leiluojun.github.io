---
layout:     post
title:      "良好的代码是自己最好的文档"
subtitle:   ""
date:       2017-05-03 16:50:05
author:     "Yuhj"
header-img: "img/post-bg-nextgen-web-pwa.jpg"
header-mask: 0.3
catalog:    true
description: Good code is like a good joke — it requires no explanation.
tags:
    - 代码    
    - 学习
    - 规范
    
---
![](https://cdn-images-1.medium.com/max/1600/1*IP0pZuFq3pQ7KTUV0Nz7fQ.jpeg)


### 前言



好的代码就像一个好笑话 —— 它不需要注释<br>
如果你的代码不言自明，大部分时间都不需要评论和文档。<br>
好的代码就像一辆拥有超强马力和性能的汽车，运动到极限，没有任何问题。当它出现故障时，任何修理师都可以将其推入他们的车库，并使用常用的工具在短时间内修复它。<br>
坏代码就像一辆承诺能够达到200MPH的汽车，但是立体声只能接受盒式磁带，并且底部悬挂是倾斜的。每当你只是尝试去调整镜子的角度时，汽车就会爆发火焰，发出巨大的轰鸣声，并且必须使用外星人的工具并将其放在装配线上，让专业的的人员进行维修。

### 好的代码就像一本写得很好的教科书

- 容易理解
- 清晰的分为章节，每个章节都有不同的侧重点

### 坏代码就像一本写得不好的教科书

- 所有章节都相互引用，但每章不清楚
- 同样的事情一再被描述，没有明显的原因
- 作者经常自我矛盾


### 如果你想编写好的代码，你应该记住的事情：

- `可读性` —— 适用于你和任何查看代码的人
- `可维护性` —— 保持代码易于修改
- `简单` —— 不引入不必要的过度并发症
- `效率` —— 你的代码应该尽可能快地实现
- `清晰度` —— 如果你的代码不言自明，大部分时间都不需要评论。明确指出您的方法和属性。将长代码分解成较小的位。并且永远不要复制和粘贴代码块。当我们要求时，需要注释和文件。由于 代码注释是一个人类可读的文本，它写在源代码中，以解释为什么存在一些代码。
- 每分钟低的“WTF”？最小化另一个开发者读取代码的频率，不要让阅读者说“WTF”？



### 代码质量测试

有另一个程序员在阅读你写的代码，而他之前从来没有看过你的代码，但他在常熟每个模块对你的代码的看法时，如果有着非常强烈的去解释代码的冲动，你的代码可能越差。
如果你可以冷静地坐在那里，不需要解释任何事情，他们也不需要问很多问题，你写的代码可能是很好的。

### 什么样的代码算是好代码？

- 算法在速度和可读性方面都是最佳的
- 单一指向原则，类，变量和函数的功能都是独立的，没有其他多余的含义
- 一段时间后，你去阅读自己写的代码，能够快速入手？
- 保证有可能要被重用的代码是可以被重用的
- 方法往往很短，理想地执行单个任务
- 您有足够的信息来调用方法，而不查看其中的代码（命名规范）
- 当您的每个`Class`都提供单一，非常明确的目的时，与其他明确定义的`Class`分开
- 您的方法很短 ： 理想情况下，低于50行，肯定在100行以下 - 而且他们的名字清楚地界定了它们做什么
- 当我们下次添加/修改一个功能时，应该很容易
- 你的try / catch块尽可能的小
- 单元测试很容易写

### 良好的代码是模块化的

假设你的项目有三个不同的层次：`inner`，`middle`和`outer`,你的`inner`不应从`middle`或`outer`导入任何内容。你的`middle`不应从`outer`导入任何内容。<br>

这样，你的`inner`代码可以独立测试。

> “Good code is its own best documentation” — Steve McConnell.

感谢您阅读本文。如果你有不同的意见，请在留言板留言～















