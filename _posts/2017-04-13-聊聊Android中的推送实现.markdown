---
layout:     post
title:      "聊聊Android中的消息推送"
subtitle:   ""
date:       2017-04-13 13:05:14
author:     "Yuhj"
header-img: "img/post-bg-nextgen-web-pwa.jpg"
header-mask: 0.3
catalog:    true
description: 推送之难，难于上青天
tags:
    - Android
    - 推送
    - 进程保活
    
---
## 引言
现在几乎每一个线上的App都集成了推送的功能，推送也用于消息传递，唤醒用户等各种产品策略。一个到达率相对较高的推送功能实现，能够极大的帮助产品提高活跃度。那么，既然推送这么重要，今天我们就来聊一聊Android中的推送技术的实现。<br>

### 背景
推送虽然是件小事，可实现起来确不是那么容易。有些朋友在此处可能不太认可，觉得推送有什么难的，集成一个三方的SDK不就行了吗？真的这么容易么？当然不是。其实不管是集成第三方推送（比如小米Push，阿里Push等）还是自己去实现推送技术，原理都是一样的，就是用`Socket`去实现长连接以达到服务器主动Push的目的。<br>


也就是说，我们要维护一个push进程一直在后台运行，以达到随时收到Push的目的。那么问题来了，最让Android开发者头疼的`进程保活`问题又出现了。关于进程保活，大家或多或少都了解一些；其实，在Google原生系统是没有这个问题的：
![](/image/2017-4-13/service.png)
从Google的文档可以看出，当你设置了`START_STICKY`属性后，如果因为资源不足的问题service被系统杀死，过一段时间service是会自动重启的。具体可以参考[官方文档](https://developer.android.com/reference/android/app/Service.html)。可是万恶的国内硬件厂商很无耻的不这个性能去掉了（可能也是为了避免垃圾软件）。
> 绝对意义上的进程保活是不存在的

首先我们声明，没有百分之百的保活，即使是像微信QQ这样的大厂，也需要厂商加到启动白名单里才能保持在线，当然如果公司公关能力比较强，这个方案自然是极好的了。关于进程保活，我在这就不多做叙述可，网上有很多方案。
> 相关资料

[Android 进程保活招式大全](http://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&mid=2653577617&idx=1&sn=623256a2ff94641036a6c9eea17baab8&scene=4#wechat_redirect)<br>
[微信Android客户端后台保活经验分享](http://mp.weixin.qq.com/s?__biz=MzA3ODg4MDk0Ng==&mid=403254393&idx=1&sn=8dc0e3a03031177777b5a5876cb210cc&scene=1&srcid=0402fANUWIotbVLECw4Ytz4K#wechat_redirect)<br>

### 推送的实现方式
总结一下几种推送实现方式，其中有些我们只要了解即可，因为属于历史解决方案，现在已经被废弃掉了。

##### 轮询
客户端定期询问服务器有没有新的消息，这种方式最大的缺点就是性能和实时性的矛盾，轮询时间过长和过短都不好。

##### 长链接
目前最通用的方案，客户端与服务端建立 TCP 长连，定时发送心跳包保活，有新消息时服务端通过该长连通道进行推送。<br>
关于长链接所需要注意一些细节和主要技术实现，大家可以参考我另外一篇文章[IM客户端架构技术浅谈](https://leiluojun.github.io/2017/03/21/IM客户端架构技术浅谈/)。<br>
有了长连，即使在休眠模式下，有推送消息过来，也能唤醒 Android 系统，这是由系统机制决定的，我们这里只要知道结论就好。

### 推送的指标

##### 在线率
> 在线率 = 在线用户数 / 总用户数。

推送服务后台保持在线的方法：

1.Push 进程常驻后台，需要用户手动让应用常驻；<br>
2.共享连接通道的方式，比如阿里推送，通过共享连接，当应用有推送到达时，唤起该应用(全家桶)，比如用户可能正在使用淘宝，此时会给合作的App发送一个消息唤醒应用。
<br>显然，后者在体验上更加接近 GCM 。

### 到达率
> 到达率 = 实际到达数 / 目标用户数

目前，所有三方SDK的到达率都不理想，哪怕阿里push利用了淘系全家桶的方案，到达率也就勉强达到60%。

### 耗电量
耗电量受到很多方面的影响，如果收到推送比较多，打开应用比较频繁，耗电量自然也会上去不少，但这个用户是可以接受的。<br>

以下几个耗电量的因素用户是比较反感的：<br>
1.应用间互相唤醒产生的耗电，因为这个耗电是别的应用的，用户本来没有意图要去打开；<br>
2.错误重试造成的耗电，重试策略的优化包括重试时间的累加和重置。<br>

### 推送选型
上文提高，阿里的push到达率也才60%，那么我们在人力和资源方面都与远不及阿里团队的情况下，到达率岂不是更加惨淡？理论是这样的。。。所以如何选择一个高到达的push SDK 是非常有必要的，当然如果你们团队有精力的话，也可以自己写一套Push，至少应用在前台运行时，自研的推送到达率还是可观的。<br>
##### 第三方推送主要有厂商推送和非厂商推送：
- 华为、小米、魅族推送；
- 个推、极光、友盟；
- 阿里、腾讯、百度。

其中，选型的几个因素：<br>

1. 厂商推送通知是否系统通道（所有厂商支持）；
2. 厂商推送透传是否系统通道（仅魅族）；
3. 非厂商推送的市场占有率（影响共享连接互相唤起的概率）。

两种推送方式各有优劣，比如在小米手机上，阿里推送到达率60%，而小米推送的到达率能够达到90%以上，但小米推送在其他手机上的表现一般。所以，我们的方案是：`两种方式都集成`，实现原则是是：`如果有系统通道，尽量集成厂商推送，比如小米推送，如果没有，则选择一种非厂商推送，如阿里`。
### 推送接入

##### 如何解耦

由于各个推送 sdk 接口定义不同，为了减少耦合，我们可以采用抽取公用接口`IPushInterface`形式进行接入,每一种推送都去实现这个接口，具体的启动和切换的实现放在PushServiceImpl(比如XiaoMiPushImpl) .其实大部分推送平台的接口标准都差不多，无非是命名上有差异，所以我们用 IPushInterface这个接口来屏蔽这种差异。<br>
对于推送启动和切换的操作，放在 PushService 中。当启动某一个推送服务的时候，就关掉其他的推送服务，后台始终只保持一个推送服务。

##### 推送的切换策略

建议选择手机 rom 而非手机型号作为切换条件，这样可以解决部分用户刷机的问题，比如 Nexus 手机刷了个 MIUI 的情况。获取到 rom 信息后，有3种推送切换策略。<br>

- 策略一：<br>
客户端根据 rom 信息自动选择使用哪个推送。<br>
优点：无后端工作量，不需要切换；<br>
缺点：一旦某个推送挂了一天，无法临时切换到其他推送。<br>

- 策略二：<br>
客户端上报 rom 信息，后端选择使用哪个推送。<br>
优点：灵活切换推送；<br>
缺点：切换推送重新绑定有个时间差。

- 策略三：<br>
使用推送 sdk 自己的集成方案，当 sdk 自己的推送服务离线时，切换到厂商推送。<br>
优点：最大程度保证推送的稳定性；<br>
缺点：集成方案本身的不稳定性影响了推送的稳定性。<br>


##### 推送类型

推送类型分为通知和透传。<br>

1. `通知`：<br>
厂商到达率有优势；<br>
开发成本较高，需要适配不同厂商的接口标准。<br>

2. `透传`：<br>
可以自己解析、展示、跳转，灵活性高；<br>
开发成本较低，适配一次就够（通常通过 json ）；<br>
一些厂商的透传到达率没有厂商优势。<br>


好了，推送就先聊到这里了。本次分享仅仅是一家之言，大家有比较好的建议，欢迎指正。