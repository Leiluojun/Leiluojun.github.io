---
layout:     post
title:      "Android 性能优化之网络优化"
subtitle:   ""
date:       2017-04-24 11:02:14
author:     "Yuhj"
header-img: "img/post-bg-nextgen-web-pwa.jpg"
header-mask: 0.3
catalog:    true
description: App网络性能优化方面的一些实践经验。
tags:
    - Android
    - 网络
    - 性能优化
    
---
## 引言
移动互联网发展到现在，用户的联网方式已经完成了由流量依赖到Wifi依赖的转变。虽然网络环境在变好，但也对网络的应用提出了更高的要求，同时开发人员对网络的重视度却在下降。确实Wifi场景下用户的网络质量变好了，而且用户对网络流量消耗的敏感度也在下降。但是对网络问题的忽视，在网络状态不好的场景下，会表现的很明显。
![](/image/2017-4-24/network_statistics.png)

## 网络问题
### 流量消耗
过多以及没有经过处理的网络请求，会消耗用户的网络流量。Android用户一般都会安装手机管理类App，可以方便清楚查看到每个App耗费的流量，高流量消耗会导致经常处于非Wifi场景下的用户卸载。

### 电量消耗
大量的网络请求容易导致电量快速消耗。

### 用户体验差
网络请求慢，必然造成用户在获取数据时等待较长的时间，虽然大部分APP都会采用loadding图来减少视觉层次的等待时间，但这个并不能从根本解决问题，用户等待的绝对时间并没有减少。例如小黄车每次请求数据的时间都让我难以忍受。
### 其他
服务端下发的一些配置或者插件，我们肯定希望越早越快下载到本地好，因为等待的时间越长，就越有可能出现意外，比如用户主动杀掉软件等。

## 网络监控

### Network Monitor
Android Studio自带的Network Monitor简单直观，可以看出时间段之内的网络请求数量及访问速率；
![](/image/2017-4-24/network1.png)

### Stetho
[Stetho](https://github.com/facebook/stetho)是Facebook出品的一个Android应用的调试工具。无需Root即可通过Chrome，在Chrome Developer Tools中可视化查看应用布局，网络请求，sqlite，preference等。同样集成了Stetho之后也可以很方便的查看网络请求的各种情况。
![](/image/2017-4-24/network2.png)

### network-connection-class
[network-connection-class](https://github.com/facebook/network-connection-class)是一个Facebook出品的用于检测网络质量和变化的Android库，可以让你了解当前用户的互联网连接的质量。 连接被分为几个“连接类”，这使得它易于开发。 该Library通过聆听您应用程序完成的现有互联网流量来完成此操作，并在用户的连接质量更改时通知您。 然后，开发人员可以使用此Connection类信息并调整应用程序的行为（请求较低质量的图像或视频，节气门类型提前等）。`network-connection-class`目前仅测量用户的下行带宽。 
![](/image/2017-4-24/network3.png)
```java
ConnectionQuality cq = ConnectionClassManager.getInstance().getCurrentBandwidthQuality();
```
可以通过上面的方法来获取网络质量。
```java
ConnectionClassManager.getInstance().getDownloadKBitsPerSecond()
```
通过上面的方法来获取平均网速。


```java
// Override ConnectionClassStateChangeListener
ConnectionClassManager.getInstance().register(mListener);
DeviceBandwidthSampler.getInstance().startSampling();
// Do some downloading tasks
DeviceBandwidthSampler.getInstance().stopSampling();
```
## 网络优化
网络优化主要从三个方面进行：

- 速度
- 成功率
- 流量

### Http压缩
HTTP压缩是指: Web服务器和浏览器之间压缩传输的”文本内容“的方法。 HTTP采用通用的压缩算法，比如gzip来压缩HTML,Javascript, CSS文件。 能大大减少网络传输的数据量，提高了用户显示网页的速度。当然，同时会增加一点点服务器的开销。<br>
Http压缩对纯文本可以压缩至原内容的40%, 从而节省了60%的数据传输。优点：`可以减少流量消耗`和`可以减少流量消耗`。需要注意的是：Http压缩对相同文本的压缩比远大于不同文本的压缩比。
> HTTP内容编码和HTTP压缩的区别

HTTP压缩，在HTTP协议中，其实是内容编码的一种。<br>
在Http协议中，可以对内容（也就是body部分）进行编码， 可以采用gzip这样的编码。 从而达到压缩的目的。 也可以使用其他的编码把内容搅乱或加密，以此来防止未授权的第三方看到文档的内容。<br>
所以我们说HTTP压缩，其实就是HTTP内容编码的一种。 所以大家不要把HTTP压缩和HTTP内容编码两个概念混淆了。

###  IP直连与HttpDns
DNS解析的失败率占联网失败中很大一种，而且首次域名解析一般需要几百毫秒。针对此，我们可以不用域名，才用IP直连省去 DNS 解析过程，节省这部分时间。<br>
另外熟悉阿里云的小伙伴肯定知道HttpDns：HttpDNS基于Http协议的域名解析，替代了基于DNS协议向运营商Local DNS发起解析请求的传统方式，可以避免Local DNS造成的域名劫持和跨网访问问题，解决域名解析异常带来的困扰。

- 防劫持:绕过运营商Local DNS，避免域名劫持，让每一次访问都畅通无阻。
- 精准调度:基于访问的来源IP，获得最精准的解析结果，让客户端就近接入业务节点。
- 0ms解析延迟:通过热点域名预解析、缓存DNS解析结果、解析结果懒更新策略等方式实现0解析延迟。
- 快速生效:避免Local DNS不遵循权威TTL，解析结果长时间无法更新的问题。
- 降低解析失败率:有效降低无线场景下解析失败的比率。



### 链路优选
因为考虑到单个域名更容易被劫持，以及如果域名服务器出现故障不能及时修复。所以客户端应该使用链路优选策略。在App启动时，客户端从服务器获取一组多个域名，然后对每一个域名进行访问和测速，选取网络质量最好的一个APP保存下来，之后的连接请求都在这个域名下访问。（间隔一段时间后会重新选择新的域名）
![](/image/2017-4-24/network4.png)

### 图片处理
#### 图片上传
> Webp



使用WebP格式；同样的照片，采用WebP格式可大幅节省流量，相对于JPG格式的图片，流量能节省将近 25% 到 35 %；相对于 PNG 格式的图片，流量可以节省将近80%。最重要的是使用WebP之后图片质量也没有改变。[官方文档](https://developers.google.com/speed/webp/)

> 缩略图

App中需要加载的图片按需加载，列表中的图片根据需要的尺寸加载合适的缩略图即可，只有用户查看大图的时候才去加载原图。不仅节省流量，同时也能节省内存！阿里云图片的图片存储服务在原图链接之后拼接宽高参数，根据参数的不同返回相应的图片。具体参考[阿里云OSS图片服务](https://help.aliyun.com/document_detail/31873.html)

#### 图片下载
图片（文件）的上传失败率比较高，不仅仅因为大文件，同时带宽、时延、稳定性等因素在此场景下的影响也更加明显

- 避免整文件传输，采用分片传输；
- 根据网络类型以及传输过程中的变化动态的修改分片大小；
- 每个分片失败重传的机会。
- 动态调整超市时间。

### 请求合并
合并网络请求，减少请求次数。对于一些接口类如统计，无需实时上报，将统计信息保存在本地，然后根据策略统一上传。这样头信息仅需上传一次，减少了流量也节省了资源。

### 网络缓存
通过网络获取内容既速度缓慢又开销巨大。较大的响应需要在客户端与服务器之间进行多次往返通信，这会延迟浏览器获得和处理内容的时间，还会增加访问者的流量费用。因此，缓存并重复利用之前获取的资源的能力成为性能优化的一个关键方面。
![](/image/2017-4-24/network5.png)
目前大多数APP使用的网络框架是OKHttp，我们可以直接利用OKHttp来实现网络缓存。
```java
  final CacheControl.Builder builder = new CacheControl.Builder();
            builder.noCache();//不使用缓存，全部走网络
            builder.noStore();//不使用缓存，也不存储缓存
            builder.onlyIfCached();//只使用缓存
            builder.noTransform();//禁止转码
            builder.maxAge(10, TimeUnit.MILLISECONDS);//指示客户机可以接收生存期不大于指定时间的响应。
            builder.maxStale(10, TimeUnit.SECONDS);//指示客户机可以接收超出超时期间的响应消息
            builder.minFresh(10, TimeUnit.SECONDS);//指示客户机可以接收响应时间小于当前时间加上指定时间的响应。
            CacheControl cache = builder.build();//cacheControl
```

### 提供网络服务重发机制
移动网络不稳定，如果一次网络服务失败，就立刻反馈给用户你失败了，体验并不友好。我们提供了网络服务重发机制，即当网络服务在连接失败、写Request失败、读Response失败时`自动重发`服务；长连接失败时就用短连接来做重发补偿，短连接服务失败时当然还是用短连接来补偿。这种机制增加了用户体验到的服务成功概率。

当然不是所有网络服务都可以重发，例如支付服务在读取Response失败时，就不能重发，因为下单请求可能已经到达服务器，此时重发服务可能会造成重复订单，所以我们需要添加了重发服务开关，业务段可以自行控制是否需要。

### 网络质量检测（根据网络质量来改变策略）
客户端可以根据用户当前网络情况（利用`network-connection-class`）来实行不同的产品策略。比如Wi-Fi情况下超时时间为60s，4G情况下超时时间为120s。同时，也可以根据网络的好快去设置不同的并发数量和下载不同质量的图片。当然，及时是`network-connection-class`测量出来的网络下行速度也并不精确，只供参考。

### 减少数据传输量
减少数据传输量是降低网络消耗的一个重点，上文提到Gzip压缩其实就是在降低数据量。目前，大多数APP采用的数据传输格式都是json（你非要用xml传输也没办法）；其实采用序列化与反序列化能极大的减少网络传输量。在各类序列化与反序列化方式中，[Protobuffer](https://developers.google.com/protocol-buffers/)以其灵活、高效以及多语言支持脱颖而出。<br>
protobuf是Google开发的一种数据描述语言语言，能够将结构化的数据序列化，可用于数据存储，通信协议等方面,官方版本支持C++,Java,Python，社区版本支持更多语言。<br>

值得注意的是，protobuf是以二进制来存储数据的。相对于JSON和XML具有以下优点：

- 简洁
- 体积小:消息大小只需要XML的1/10 ~ 1/3
- 速度快:解析速度比XML快20 ~ 100倍
- 使用Protobuf的编译器,可以生成更容易在编程中使用的数据访问代码
- 更好的兼容性,Protobuf设计的一个原则就是要能够很好的支持向下或向上兼容

 [《Protobuffer和json深度对比》](http://cxshun.iteye.com/blog/1974498)
 
 
### 协议优化
 
 使用最新的协议，新版本的协议经过很多次优化，有更好的表现。可以看看业界网络性能优化的新技术方向，目前最有潜力的是Google推出的SPDY和QUIC协议。<br>
[SPDY](https://www.chromium.org/spdy/spdy-whitepaper)已成为HTTP/2.0 Draft，有希望成为未来HTTP协议的新标准。HTTP/2.0提供了很多诱人的特性（多路复用、请求优先级、支持服务端推送、压缩HTTP Header、强制SSL传输、对服务端程序透明等）。国内很多App包括美团、淘宝、支付宝都已经在尝试使用SPDY协议。<br>

[QUIC](https://www.chromium.org/quic)是基于UDP实现的新网络协议，由于TCP协议实现已经内置在操作系统和路由器内核中，Google无法直接改进TCP，因此基于无连接的UDP协议来设计全新协议可以获得很多好处。首先能够大幅减少连接时间，QUIC可以在发送数据前只需要0 RTT时间，而传统TCP/TLS连接至少需要1-3 RTT时间才能完成连接（即使采用Fast-Open TCP或TLS Snapshot）；其次可以解决TCP Head-of-Line Blocking问题，通常前一个TCP Packet发送成功前会拥塞后面的Packet发送，而QUIC可以避免这样的问题；QUIC也有更好的移动网络环境下拥塞控制算法；新的连接方式也大幅减少了Connectiont Migration问题的影响。<br>

随着这些新协议的逐渐成熟，相信未来能够进一步提高移动端的网络服务性能，值得大家保持关注。



网络优化，实际上和内存优化一样，是一项投入巨大的事情。优化的手段也很多，我这里也只是把常见的优化方式总结了一下；大家有好的优化方式可以互相交流。
 
> 参考

 [Android性能优化典范《Network Performance》](https://www.youtube.com/watch?v=l5mE3Tpjejs&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE&amp;index=36)<br>
 [Protobuf简单使用](http://www.iloveandroid.net/2015/10/08/studyPtorobuf/)<br>






